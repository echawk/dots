;; -*- mode: lisp -*-

(require 'asdf)
(asdf:load-system :uiop)

;; Muffle warnings while we load our init.
#+SBCL (declaim (sb-ext:muffle-conditions style-warning))

;; Make these stupid dummy package to make SBCL shut up.
(defpackage :quicklisp-quickstart
  (:use :cl)
  (:export :install))
(in-package :quicklisp-quickstart)
(defun install () t)

(defpackage :ql-dist
  (:use :cl)
  (:export :install-dist :find-dist))
(in-package :ql-dist)
(defun install-dist (arg1 arg2 arg3) (list arg1 arg2 arg3))
(defun find-dist (str) str)

;; Switch back to cl-user package.
(in-package :cl-user)

;;; Install quicklisp if it is not already installed.
#-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (unless (probe-file quicklisp-init)
    (let ((temp-dir (string-trim '(#\Newline)
                                 (uiop:run-program "mktemp -d" :output :string))))
      (uiop:with-current-directory (temp-dir)
        (progn
          (uiop:run-program "curl -O https://beta.quicklisp.org/quicklisp.lisp"
                            :output *standard-output*)
          (load "quicklisp.lisp")
          (quicklisp-quickstart:install)
          (uiop:run-program "rm quicklisp.lisp")))
      (uiop:run-program (concatenate 'string "rm -vrf " temp-dir))))

  (when (probe-file quicklisp-init)
    (load quicklisp-init))

  ;; Also install the ultralisp dist while we are at it...
  (unless (ql-dist:find-dist "ultralisp")
    (ql-dist:install-dist "http://dist.ultralisp.org/" :prompt nil)))

;; how to get the current directory always detectable by quicklisp
#+quicklisp
(push '*default-pathname-defaults* asdf:*central-registry*)

;; TODO: figure out how to incorporate ql-https

;; https://github.com/fukamachi/qlot
;; https://www.clpm.dev/
;; https://medium.com/@MartinCracauer/static-type-checking-in-the-programmable-programming-language-lisp-79bb79eb068a

(defmacro with-temporary-directory (form)
  "Evaluate form within a temporary directory created by `mktemp -d`."
  `(let ((temp-dir
           (string-trim '(#\Newline)
                        (uiop:run-program "mktemp -d" :output :string))))
     (uiop:with-current-directory (temp-dir)
       ,form)
     (uiop:run-program (concatenate 'string "rm -vrf " temp-dir))))

(defun install-ocicl-cmd ()
  (with-temporary-directory
      (progn
        (uiop:run-program
         (concatenate
          'string
          "sh -c '"
          "HOME=/dev/null "
          "git clone --depth 1 "
          "https://github.com/ocicl/ocicl"
          "'"))
        (uiop:with-current-directory
          ((merge-pathnames "ocicl" (uiop:getcwd)))
          (uiop:run-program
           (concatenate
            'string
            "sh -c '"
            "sbcl --eval \"(defconstant +dynamic-space-size+ 2048)\" --load setup.lisp"
            "'"))))))

(defun load-ocicl-runtime-file (ocicl-runtime-file)
  (if (probe-file ocicl-runtime-file)
      (load ocicl-runtime-file)
      (unless
          (uiop:file-exists-p
           (merge-pathnames ".local/bin/ocicl" (user-homedir-pathname)))
        (install-ocicl-cmd)
        (uiop:run-program "ocicl setup")
        (load ocicl-runtime-file))))

;; Setup OCICL if we have the binary...
(when (uiop:file-exists-p
       (merge-pathnames ".local/bin/ocicl" (user-homedir-pathname)))
  #-OCICL
  (let ((ocicl-runtime-file
          (merge-pathnames ".local/share/ocicl/ocicl-runtime.lisp"
                           (user-homedir-pathname))))
    (load-ocicl-runtime-file ocicl-runtime-file)
    #+OCICL (asdf:initialize-source-registry
             (list :source-registry (list :directory (uiop:getcwd))
                   :inherit-configuration))))

;; Thank you : https://gist.github.com/ryukinix/5273af4b25dec53ed9f078bd7e350d88
(defun executables ()
  (loop with path = (uiop:getenv "PATH")
        for p in (uiop:split-string path :separator ":")
        for dir = (probe-file p)
        when (uiop:directory-exists-p dir)
          append (uiop:directory-files dir)))

(defun find-executable-p (name)
  (find name (executables)
        :test #'equalp
        :key #'pathname-name))

;; Install `qlot` in the REPL if it isn't available in $PATH.
(unless (find-executable-p "qlot")
  (format t "NOTE: There is no `qlot` executable on this system. Installing via quicklisp...")
  #+QUICKLISP (ql:quickload :qlot :silent t))

;; Unmuffle our warnings again.
#+SBCL (declaim (sb-ext:unmuffle-conditions style-warning))
